%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*	Nan.Numerics.Prime
	A simple prime number library
	Copyright 2016 Julio P. Di Egidio
	<mailto:julio@diegidio.name>
	<http://julio.diegidio.name/Projects/Nan.Numerics.Prime/>
	
	This file is part of Nan.Numerics.Prime.
	
	Nan.Numerics.Prime is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	Nan.Numerics.Prime is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Nan.Numerics.Prime.  If not, see <http://www.gnu.org/licenses/>.
*/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (SWI-Prolog 7.3.25)

% TODO: Improve (leveraging of) library(pio)?

:- module(prime_pio, []).

:- public
	open_/3,		% +File:file, +Mode:oneof(read,write), :GStream:callable
	read_/2,		% +Stream:stream, :GAdd:callable
	write_/2.		% +Stream:stream, :GGen:callable

/** <module> A simple prime number library :: Pure I/O

*|Nan.Numerics.Prime (nan_numerics_prime.pl)|*

Module =prime_pio= (nan_numerics_prime_pio.pl)
provides low-level predicates to read/write comma-separated lists of
positive integer numbers from/to a file or stream.

Predicates in this module are _not_ synchronized.

*NOTE*: Predicates in this module are _unsafe_, i.e. do not validate input
arguments and are not steadfast.

@author		Julio P. Di Egidio
@version	1.3.0-beta
@copyright	2016 Julio P. Di Egidio
@license	GNU GPLv3
*/

:- use_module(library(apply)).
:- use_module(library(dcg/basics)).
:- use_module(library(pio)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%!	open_(+File:file, +Mode:oneof(read,write), :GStream:callable) is det.
%
%	Opens File in Mode and calls back =|GStream(Stream)|= where _Stream_ is
%	the opened I/O stream.  Mode can be one of =read= or =write=.  File is
%	automatically closed after GStream is finished.
%
%	Encoding of file is =ascii=, type is =text=, buffering is =full=.
%
%	Calls to this predicate are _not_ synchronized.
%
%	@error	Errors from system:open/4.

:- meta_predicate
	open_(+, +, 1).

open_(File, Mode, GStream) :-
	file__opts(Mode, Opts),
	setup_call_cleanup(
		open(File, Mode, Stream, [wait(false)| Opts]),
		call(GStream, Stream),
		close(Stream, [force(false)])
	).

%!	read_(+Stream:stream, :GAdd:callable) is det.
%
%	Reads a comma-separated list of positive integer numbers from Stream.
%	Except for the first read number, for every number _N_ that is read
%	calls =|GAdd(+N0:posint, +N:posint)|= where _N0_ is the previously read
%	number.  Terminates either at end-of-stream or when GAdd terminates.
%
%	Encoding of stream is =ascii=, type is =text=, buffer size is =1024=.
%
%	Calls to this predicate are _not_ synchronized.
%
%	@error	syntax_error(invalid_format)	Format is invalid.
%	@error	Errors from system:read/2.

:- meta_predicate
	read_(+, 2).

read_(Stream, GAdd) :-
	set_stream_(Stream, read),
	stream_to_lazy_list(Stream, List),
	phrase(parse_(GAdd), List, _).	% NOTE: phrase/3!

:- meta_predicate
	parse_(2, +, -),
	parse__do(2, +, +, -),
	parse__do__n(2, +, +, -),
	parse__do__s(2, +, +, +, -),
	parse__sel(2, +, +, +, -),
	parse__end(2, +, +, +, -).

parse_(GAdd) --> parse__n(N0), !, parse__do(GAdd, N0).
parse_(_) --> parse__e, !.
parse_(_) --> syntax_error(invalid_format).

parse__do(GAdd, N0) --> parse__c, !, parse__do__n(GAdd, N0).
parse__do(_, _) --> parse__e, !.
parse__do(_, _) --> syntax_error(invalid_format).

parse__do__n(GAdd, N0) --> parse__n(N), !, parse__do__s(GAdd, N0, N).
parse__do__n(_, _) --> syntax_error(invalid_format).

parse__do__s(GAdd, N0, N) --> parse__c, !, parse__sel(GAdd, N0, N).
parse__do__s(GAdd, N0, N) --> parse__e, !, parse__end(GAdd, N0, N).
parse__do__s(_, _, _) --> syntax_error(invalid_format).

parse__sel(GAdd, N0, N) --> { call(GAdd, N0, N) }, !, parse__do__n(GAdd, N).
parse__sel(_, _, _) --> [].

parse__end(GAdd, N0, N) --> { call(GAdd, N0, N) }, !.
parse__end(_, _, _) --> [].

parse__n(N) --> blanks, integer(N), { N > 0 }.

parse__c --> blanks, ",".

parse__e --> blanks, eos.

%!	write_(+Stream:stream, :GGen:callable) is det.
%
%	Writes a comma-separated list of positive integer numbers to Stream.
%	Calls =|GGen(-N:posint)|= to generate the numbers=.  Terminates when
%	GGen terminates.  The file may be empty.
%
%	Encoding of Stream is =ascii=, type is =text=, buffering is =full=,
%	buffer size is =1024=.
%
%	Calls to this predicate are _not_ synchronized.
%
%	*NOTE*: Does not check that the numbers generated by GGen are positive
%	integer numbers.
%
%	@error	Errors from system:write/2.

:- meta_predicate
	write_(+, 1).

write_(Stream, GGen) :-
	set_stream_(Stream, write),
	IsFirst = isFirst(true),
	ignore(forall(
		call(GGen, P),
		(	arg(1, IsFirst, true)
		->	write(Stream, P),
			nb_setarg(1, IsFirst, false)
		;	write(Stream, ','),
			write(Stream, P)
		)
	)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%	set_stream_(+Stream:stream, +Mode:oneof(read,write)) is det.

set_stream_(Stream, Mode) :-
	stream__opts(Mode, Opts),
	maplist(set_stream(Stream), Opts).

%	file__opts(+Mode:oneof(read,write), -Opts:list) is det.

file__opts(read,
[	lock(read),
	eof_action(error)
|	BaseOpts
]) :-
	file__opts(BaseOpts).
file__opts(write,
[	lock(write),
	buffer(full)
|	BaseOpts
]) :-
	file__opts(BaseOpts).

file__opts(
[	bom(false),
	encoding(ascii),
	type(text)
]).

%	stream__opts(+Mode:oneof(read,write), -Opts:list) is det.

stream__opts(read,
[	eof_action(error)
|	BaseOpts
]) :-
	stream__opts(BaseOpts).
stream__opts(write,
[	buffer(full),
	representation_errors(error)
|	BaseOpts
]) :-
	stream__opts(BaseOpts).

stream__opts(
[	encoding(ascii),
	type(text),
	record_position(true),	% NOTE: Must be true for pio:stream_to_lazy_list/2.
	buffer_size(1024)		% TODO: Review this. #####
]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
